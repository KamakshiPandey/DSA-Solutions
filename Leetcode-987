/**
 * Problem: Vertical Order Traversal of a Binary Tree
 * 
 * Given the root of a binary tree, return the vertical order traversal of its nodes' values.
 * 
 * The order rules:
 * 1. Nodes are grouped by their column index (x-coordinate).
 * 2. Columns are ordered from leftmost (smallest x) to rightmost (largest x).
 * 3. Within each column, nodes are ordered by row index (y-coordinate), top to bottom.
 * 4. If two nodes share the same position (x, y), order them by node value.
 * 
 * Approach:
 * ---------
 * 1. Use BFS to traverse the tree while tracking coordinates:
 *      - Root starts at (x=0, y=0)
 *      - Left child: (x-1, y+1)
 *      - Right child: (x+1, y+1)
 * 
 * 2. Store values in a nested map:
 *      map<int, map<int, multiset<int>>> nodes;
 *      - Outer map key: x (column index)
 *      - Inner map key: y (row index)
 *      - multiset<int>: stores values sorted when positions are same
 * 
 * 3. BFS ensures we visit nodes level by level, but the sorting is handled
 *    by the ordered maps and multiset automatically.
 * 
 * 4. Finally, extract values from `nodes`:
 *      - Iterate columns in increasing x order
 *      - For each column, iterate rows in increasing y order
 *      - Append all values from the multiset into the column's list
 * 
 * Time Complexity:
 *   O(N log N) where N = number of nodes (due to map + multiset operations)
 * Space Complexity:
 *   O(N) for storing all node positions
 */


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
vector<vector<int>>traversal(TreeNode*root){
    vector<vector<int>>ans;
    if(root==NULL){
        return ans;
    }
    queue<pair<TreeNode*,pair<int,int>>>q;
    map<int,map<int,multiset<int>>>m;
    q.push({root,{0,0}});
    while(!q.empty()){
        auto r=q.front();
        q.pop();
        int value=r.first->val;
        int x=r.second.first;
        int y=r.second.second;
        m[x][y].insert(value);
        if(r.first->left){
            q.push({r.first->left,{x-1,y+1}});
        }
        if(r.first->right){
            q.push({r.first->right,{x+1,y+1}});
        }
    }
    for(auto i:m){
        vector<int>temp;
        for(auto j:i.second){
            temp.insert(temp.end(),j.second.begin(),j.second.end());
        }
        ans.push_back(temp);
    }
    return ans;
}
    vector<vector<int>> verticalTraversal(TreeNode* root) {
       return traversal(root);
        
    }
};
